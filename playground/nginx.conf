# Nginx configuration for Depyler Playground
# Production deployment with intelligent caching and security

server {
    listen 443 ssl http2;
    server_name playground.depyler.io;
    root /var/www/depyler-playground;
    index index.html;

    # SSL Configuration (certificates should be managed by Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/playground.depyler.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/playground.depyler.io/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
    
    # Content Security Policy for WASM
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'wasm-unsafe-eval'; style-src 'self' 'unsafe-inline'; connect-src 'self' https:; img-src 'self' data:; font-src 'self' data:; worker-src 'self' blob:;" always;

    # Enable compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Enable Brotli compression if available
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # WASM-specific configuration
    location ~ \.wasm$ {
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        add_header Content-Type "application/wasm" always;
        
        # Enable compression specifically for WASM
        gzip_static on;
        brotli_static on;
        
        # CORS headers for WASM
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
    }

    # JavaScript and CSS with versioning
    location ~* \.(js|css)$ {
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        expires 1y;
        
        gzip_static on;
        brotli_static on;
    }

    # Service worker - no cache
    location /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        add_header Service-Worker-Allowed "/" always;
    }

    # Web manifest
    location /manifest.json {
        add_header Cache-Control "public, max-age=86400" always;
        add_header Content-Type "application/manifest+json" always;
    }

    # Static assets with medium-term caching
    location ~* \.(png|jpg|jpeg|gif|ico|svg|webp|avif)$ {
        add_header Cache-Control "public, max-age=2592000" always; # 30 days
        expires 30d;
    }

    # Fonts with long-term caching
    location ~* \.(woff|woff2|ttf|eot)$ {
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        add_header Access-Control-Allow-Origin "*" always;
        expires 1y;
    }

    # API endpoints with rate limiting
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        # Proxy to backend API server
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API-specific headers
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Access-Control-Allow-Origin "https://playground.depyler.io" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
    }

    # WebSocket support for hot reload (development)
    location /ws {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "OK";
    }

    # Main application - SPA with fallback
    location / {
        try_files $uri $uri/ /index.html;
        
        # HTML should not be cached
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }
    }

    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Optional: Block common exploit attempts
    location ~* (roundcube|webmail|email|e-mail|mail) {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name playground.depyler.io;
    return 301 https://$server_name$request_uri;
}

# Rate limiting zones
http {
    # Define rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;
    
    # Real IP configuration (if behind CloudFlare or similar)
    real_ip_header CF-Connecting-IP;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    # Add other CloudFlare IP ranges as needed
    
    # Log format with performance metrics
    log_format playground_performance '$remote_addr - $remote_user [$time_local] '
                                     '"$request" $status $bytes_sent '
                                     '"$http_referer" "$http_user_agent" '
                                     'rt=$request_time uct="$upstream_connect_time" '
                                     'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/playground.access.log playground_performance;
    error_log /var/log/nginx/playground.error.log warn;
}