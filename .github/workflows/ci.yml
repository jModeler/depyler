name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils lld pkg-config libssl-dev binutils lld binutils lld
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --workspace --all-features
    
    - name: Build all targets
      run: cargo build --workspace --all-targets

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils lld pkg-config libssl-dev binutils lld binutils lld
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate code coverage
      run: cargo tarpaulin --all-features --workspace --timeout 120 --out Xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Audit dependencies
      uses: actions-rust-lang/audit@v1

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils lld pkg-config libssl-dev binutils lld binutils lld
    
    - name: Install MSRV toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: "1.81"  # From Cargo.toml rust-version
    
    - name: Check MSRV
      run: cargo check --workspace --all-features

  build-release:
    name: Build Release Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils lld pkg-config libssl-dev binutils lld binutils lld
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release
      run: cargo build --release --workspace
    
    - name: Test release build
      run: ./target/release/depyler --version
      shell: bash
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: depyler-${{ matrix.os }}
        path: target/release/depyler*

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils lld
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build depyler
      run: cargo build --release --bin depyler
    
    - name: Run example transpilations
      run: |
        echo "Testing example Python files..."
        for py_file in examples/showcase/*.py; do
          echo "Transpiling: $py_file"
          ./target/release/depyler transpile "$py_file" -o "${py_file%.py}.rs"
          echo "Checking generated Rust code..."
          rustc --edition 2021 --crate-type lib "${py_file%.py}.rs" || {
            echo "Error: Generated Rust code failed to compile"
            exit 1
          }
        done